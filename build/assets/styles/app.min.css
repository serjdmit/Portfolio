/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}h1{font-size:2em;margin:0.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}body{margin:100px}.menu{padding:0}.menu li{display:inline-block;list-style:none}.technologies{padding:0}.technologies li{display:inline-block;list-style:none}.technologies li img{width:100px}#slides{position:relative;height:300px;padding:0px;margin:0px;list-style-type:none}.slide{position:absolute;left:0px;top:0px;width:100%;height:100%;opacity:0;z-index:1;transition:opacity 1s}.showing{opacity:1;z-index:2}.controls{display:none}.slide{font-size:40px;padding:40px;box-sizing:border-box;background:#333;color:#fff;background-size:cover}.slide:nth-of-type(1){background-image:url("https://s3-us-west-2.amazonaws.com/s.cdpn.io/123941/snowy-winter-vignette-bokeh-night-snow-falling-free-stock-photo.jpg")}.slide:nth-of-type(2){background-image:url("https://s3-us-west-2.amazonaws.com/s.cdpn.io/123941/free-stock-photos-1.jpg")}.slide:nth-of-type(3){background-image:url("https://s3-us-west-2.amazonaws.com/s.cdpn.io/123941/waterfall-free-stock-photo-244915.jpg")}.controls{background:#333;color:#fff;border:none;padding:20px 0px;font-size:20px;cursor:pointer;border:2px solid #fff;margin:10px 0px 0px 10px;width:70px}.controls:hover,.controls:focus{background:#eee;color:#333}.container{position:relative}.buttons{position:absolute;left:0px;top:0px;z-index:10;font-size:0px}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
